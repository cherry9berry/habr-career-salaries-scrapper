#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–∞–±–ª–∏—Ü—ã skills
"""

import psycopg2
from psycopg2.extras import execute_values
import time

def connect_local():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    conn = psycopg2.connect(
        host='localhost',
        port=5432,
        database='scraping_db',
        user='scraper',
        password='!!!!QQQQ2222'
    )
    return conn

def connect_supabase():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase"""
    conn = psycopg2.connect(
        host='aws-0-eu-central-1.pooler.supabase.com',
        port=5432,
        database='postgres',
        user='postgres.cehitgienxwzplcxbfdk',
        password='!!!!QQQQ2222'
    )
    return conn

def print_progress_bar(current: int, total: int, prefix: str = "", bar_length: int = 50):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    percent = current / total
    filled_length = int(bar_length * percent)
    bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
    print(f'\r{prefix} |{bar}| {current}/{total} ({percent:.1%})', end='', flush=True)

def fix_skills_transfer():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å —Ç–∞–±–ª–∏—Ü—ã skills"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Ç–∞–±–ª–∏—Ü—ã skills...")
    
    local_conn = connect_local()
    supabase_conn = connect_supabase()
    
    try:
        local_cursor = local_conn.cursor()
        supabase_cursor = supabase_conn.cursor()
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        local_cursor.execute("SELECT COUNT(*) FROM skills")
        total_count = local_cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {total_count:,}")
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Supabase
        print("üßπ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É skills –≤ Supabase...")
        supabase_cursor.execute("DELETE FROM skills")
        supabase_conn.commit()
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –ø–æ—Ä—Ü–∏—è–º–∏
        batch_size = 500  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        processed = 0
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å–æ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        local_cursor.execute("SELECT id, title, alias FROM skills ORDER BY id")
        
        print("üì§ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏...")
        
        while True:
            rows = local_cursor.fetchmany(batch_size)
            if not rows:
                break
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Ä—Ü–∏—é —Å –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            try:
                execute_values(
                    supabase_cursor,
                    "INSERT INTO skills (id, title, alias) VALUES %s ON CONFLICT (alias) DO UPDATE SET title = EXCLUDED.title",
                    rows,
                    template=None,
                    page_size=50  # –ï—â–µ –º–µ–Ω—å—à–∏–π page_size
                )
                
                processed += len(rows)
                print_progress_bar(processed, total_count, f"üì§ skills")
                
                # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—É—é –ø–æ—Ä—Ü–∏—é
                supabase_conn.commit()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Ä—Ü–∏—è–º–∏
                time.sleep(0.1)
                
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–æ—Ä—Ü–∏–∏: {e}")
                print(f"   –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏: {len(rows)}")
                print(f"   –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {rows[0] if rows else 'N/A'}")
                supabase_conn.rollback()
                
                # –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
                print("üîÑ –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏...")
                for row in rows:
                    try:
                        supabase_cursor.execute(
                            "INSERT INTO skills (id, title, alias) VALUES (%s, %s, %s) ON CONFLICT (alias) DO UPDATE SET title = EXCLUDED.title",
                            row
                        )
                        supabase_conn.commit()
                        processed += 1
                        print_progress_bar(processed, total_count, f"üì§ skills")
                    except Exception as single_error:
                        print(f"\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∑–∞–ø–∏—Å—å: {row} - {single_error}")
                        supabase_conn.rollback()
                        continue
        
        # –û–±–Ω–æ–≤–ª—è–µ–º sequence
        supabase_cursor.execute("SELECT setval(pg_get_serial_sequence('skills', 'id'), COALESCE(MAX(id), 1)) FROM skills")
        supabase_conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        supabase_cursor.execute("SELECT COUNT(*) FROM skills")
        final_count = supabase_cursor.fetchone()[0]
        
        print(f"\n‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –ò—Ç–æ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {final_count:,} –∏–∑ {total_count:,} –∑–∞–ø–∏—Å–µ–π")
        
        if final_count == total_count:
            print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã!")
        else:
            missing = total_count - final_count
            print(f"‚ö†Ô∏è  –ù–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {missing:,} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π
            supabase_cursor.execute("SELECT id, title, alias FROM skills LIMIT 5")
            sample = supabase_cursor.fetchall()
            print("üìã –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
            for row in sample:
                print(f"   {row[0]}: {row[1]} ({row[2]})")
        
        local_cursor.close()
        supabase_cursor.close()
        
    finally:
        local_conn.close()
        supabase_conn.close()

if __name__ == "__main__":
    fix_skills_transfer() 