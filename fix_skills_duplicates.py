#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ skills –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å
"""

import psycopg2
from psycopg2.extras import execute_values
import time
from collections import defaultdict

def connect_local():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    conn = psycopg2.connect(
        host='localhost',
        port=5432,
        database='scraping_db',
        user='scraper',
        password='!!!!QQQQ2222'
    )
    return conn

def connect_supabase():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase"""
    conn = psycopg2.connect(
        host='aws-0-eu-central-1.pooler.supabase.com',
        port=5432,
        database='postgres',
        user='postgres.cehitgienxwzplcxbfdk',
        password='!!!!QQQQ2222'
    )
    return conn

def analyze_duplicates():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
    
    local_conn = connect_local()
    cursor = local_conn.cursor()
    
    # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ alias
    cursor.execute("""
        SELECT alias, COUNT(*), STRING_AGG(title, '; ') as titles
        FROM skills 
        GROUP BY alias 
        HAVING COUNT(*) > 1
        ORDER BY COUNT(*) DESC
        LIMIT 10
    """)
    
    duplicates = cursor.fetchall()
    
    if duplicates:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ alias:")
        for alias, count, titles in duplicates[:5]:
            print(f"   '{alias}': {count} —Ä–∞–∑ - {titles[:100]}...")
    
    # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ alias
    cursor.execute("SELECT COUNT(DISTINCT alias) FROM skills")
    unique_aliases = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM skills")
    total_records = cursor.fetchone()[0]
    
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}")
    print(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö alias: {unique_aliases:,}")
    print(f"üìä –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_records - unique_aliases:,}")
    
    cursor.close()
    local_conn.close()
    
    return unique_aliases

def transfer_unique_skills():
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–±–µ—Ä–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ alias)"""
    print("\nüîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ skills...")
    
    local_conn = connect_local()
    supabase_conn = connect_supabase()
    
    try:
        local_cursor = local_conn.cursor()
        supabase_cursor = supabase_conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Supabase
        print("üßπ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É skills –≤ Supabase...")
        supabase_cursor.execute("DELETE FROM skills")
        supabase_conn.commit()
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–ø–µ—Ä–≤—É—é –ø–æ id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ alias)
        query = """
        SELECT DISTINCT ON (alias) id, title, alias
        FROM skills 
        ORDER BY alias, id
        """
        
        local_cursor.execute(query)
        unique_records = local_cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(unique_records):,} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ—Ä—Ü–∏—è–º–∏
        batch_size = 500
        processed = 0
        
        for i in range(0, len(unique_records), batch_size):
            batch = unique_records[i:i + batch_size]
            
            try:
                execute_values(
                    supabase_cursor,
                    "INSERT INTO skills (id, title, alias) VALUES %s",
                    batch,
                    template=None,
                    page_size=100
                )
                
                processed += len(batch)
                percent = (processed / len(unique_records)) * 100
                print(f"\rüì§ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {processed:,}/{len(unique_records):,} ({percent:.1f}%)", end='', flush=True)
                
                supabase_conn.commit()
                time.sleep(0.05)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Ä—Ü–∏—è–º–∏
                
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–æ—Ä—Ü–∏–∏: {e}")
                supabase_conn.rollback()
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
                for record in batch:
                    try:
                        supabase_cursor.execute(
                            "INSERT INTO skills (id, title, alias) VALUES (%s, %s, %s)",
                            record
                        )
                        supabase_conn.commit()
                        processed += 1
                    except Exception as single_error:
                        print(f"\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: {record} - {single_error}")
                        supabase_conn.rollback()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º sequence
        supabase_cursor.execute("SELECT setval(pg_get_serial_sequence('skills', 'id'), COALESCE(MAX(id), 1)) FROM skills")
        supabase_conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        supabase_cursor.execute("SELECT COUNT(*) FROM skills")
        final_count = supabase_cursor.fetchone()[0]
        
        print(f"\n‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {final_count:,} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        supabase_cursor.execute("SELECT id, title, alias FROM skills ORDER BY id LIMIT 5")
        sample = supabase_cursor.fetchall()
        print("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
        for row in sample:
            print(f"   {row[0]}: {row[1]} ({row[2]})")
        
        local_cursor.close()
        supabase_cursor.close()
        
        return final_count
        
    finally:
        local_conn.close()
        supabase_conn.close()

def main():
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ skills")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    expected_unique = analyze_duplicates()
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    actual_transferred = transfer_unique_skills()
    
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {expected_unique:,}")
    print(f"   –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ Supabase: {actual_transferred:,}")
    
    if actual_transferred == expected_unique:
        print("üéâ –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã!")
    else:
        print(f"‚ö†Ô∏è  –†–∞–∑–Ω–∏—Ü–∞: {abs(expected_unique - actual_transferred):,} –∑–∞–ø–∏—Å–µ–π")

if __name__ == "__main__":
    main() 