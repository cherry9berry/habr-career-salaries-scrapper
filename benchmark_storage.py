#!/usr/bin/env python3
"""
–ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è PostgreSQL temp tables vs SQLite
"""

import time
import uuid
from dataclasses import asdict
from src.settings import Settings
from src.core import SalaryData
from src.database import PostgresRepository
from src.sqlite_storage import PostgresRepositoryWithSQLite

def create_test_data(count: int = 1000):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    test_data = []
    for i in range(count):
        data = SalaryData(
            reference_id=i % 100 + 1,  # –°–ª—É—á–∞–π–Ω—ã–µ ID –æ—Ç 1 –¥–æ 100
            reference_type='skills',
            data={
                'salary_from': 50000 + i * 10,
                'salary_to': 100000 + i * 20,
                'currency': 'RUB',
                'experience': 'junior' if i % 3 == 0 else 'middle' if i % 3 == 1 else 'senior'
            }
        )
        test_data.append(data)
    return test_data

def benchmark_postgres_temp(test_data, settings):
    """–ë–µ–Ω—á–º–∞—Ä–∫ PostgreSQL temp tables"""
    print("üî• –¢–µ—Å—Ç–∏—Ä—É–µ–º PostgreSQL temp tables...")
    
    repo = PostgresRepository(asdict(settings.database))
    transaction_id = str(uuid.uuid4())
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
    start_time = time.time()
    for data in test_data:
        repo.save_report(data, transaction_id)
    write_time = time.time() - start_time
    
    # –¢–µ—Å—Ç –∫–æ–º–º–∏—Ç–∞
    start_time = time.time()
    repo.commit_transaction(transaction_id)
    commit_time = time.time() - start_time
    
    return write_time, commit_time

def benchmark_sqlite(test_data, settings):
    """–ë–µ–Ω—á–º–∞—Ä–∫ SQLite"""
    print("üóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º SQLite...")
    
    repo = PostgresRepositoryWithSQLite(asdict(settings.database))
    transaction_id = str(uuid.uuid4())
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
    start_time = time.time()
    for data in test_data:
        repo.save_report(data, transaction_id)
    write_time = time.time() - start_time
    
    # –¢–µ—Å—Ç –∫–æ–º–º–∏—Ç–∞ (SQLite -> PostgreSQL)
    start_time = time.time()
    repo.commit_transaction(transaction_id)
    commit_time = time.time() - start_time
    
    return write_time, commit_time

def main():
    print("‚ö° –ë–µ–Ω—á–º–∞—Ä–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    try:
        settings = Settings.load("config.yaml")
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_counts = [100, 1000, 5000]
    
    for count in test_counts:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {count} –∑–∞–ø–∏—Å—è–º–∏...")
        test_data = create_test_data(count)
        
        try:
            # PostgreSQL temp tables
            pg_write_time, pg_commit_time = benchmark_postgres_temp(test_data, settings)
            pg_total_time = pg_write_time + pg_commit_time
            
            # SQLite
            sqlite_write_time, sqlite_commit_time = benchmark_sqlite(test_data, settings)
            sqlite_total_time = sqlite_write_time + sqlite_commit_time
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {count} –∑–∞–ø–∏—Å–µ–π:")
            print(f"PostgreSQL temp tables:")
            print(f"  ‚úèÔ∏è  –ó–∞–ø–∏—Å—å: {pg_write_time:.3f}s ({count/pg_write_time:.0f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫)")
            print(f"  üíæ –ö–æ–º–º–∏—Ç: {pg_commit_time:.3f}s")
            print(f"  üèÅ –í—Å–µ–≥–æ:  {pg_total_time:.3f}s")
            
            print(f"SQLite:")
            print(f"  ‚úèÔ∏è  –ó–∞–ø–∏—Å—å: {sqlite_write_time:.3f}s ({count/sqlite_write_time:.0f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫)")
            print(f"  üíæ –ö–æ–º–º–∏—Ç: {sqlite_commit_time:.3f}s")
            print(f"  üèÅ –í—Å–µ–≥–æ:  {sqlite_total_time:.3f}s")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if sqlite_total_time < pg_total_time:
                speedup = pg_total_time / sqlite_total_time
                print(f"üöÄ SQLite –±—ã—Å—Ç—Ä–µ–µ –≤ {speedup:.1f}x —Ä–∞–∑")
            else:
                slowdown = sqlite_total_time / pg_total_time
                print(f"üêå PostgreSQL –±—ã—Å—Ç—Ä–µ–µ –≤ {slowdown:.1f}x —Ä–∞–∑")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            continue
    
    print(f"\nüèÜ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main() 