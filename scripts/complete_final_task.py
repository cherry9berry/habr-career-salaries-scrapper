#!/usr/bin/env python3
import subprocess
import time
import requests
import psycopg2
from datetime import datetime

def log(msg):
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {msg}")

def run_git(cmd):
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=60)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_status():
    try:
        response = requests.get("https://habr-career-salaries-scrapper.onrender.com/api/status", timeout=10)
        return response.json()
    except:
        return None

def upload_regions():
    try:
        with open("examples/regions_from_db.csv", "rb") as f:
            files = {"config": f}
            response = requests.post(
                "https://habr-career-salaries-scrapper.onrender.com/api/scrape/upload",
                files=files,
                timeout=30
            )
            response.raise_for_status()
            return response.json()
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

log("=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–í–¢–û–ù–û–ú–ù–ê–Ø –ó–ê–î–ê–ß–ê ===")

# 1. –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
log("1. –ö–æ–º–º–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç...")
success, out, err = run_git("git add -A")
if success:
    success, out, err = run_git('git commit -m "fix: synchronize timestamps within transaction batch"')
    if success:
        success, out, err = run_git("git push")
        if success:
            log("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã")
            time.sleep(120)  # –ñ–¥—ë–º –¥–µ–ø–ª–æ–π 2 –º–∏–Ω—É—Ç—ã
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ push: {err}")
    else:
        log("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
else:
    log(f"‚ùå –û—à–∏–±–∫–∞ git add: {err}")

# 2. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
log("2. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º...")
result = upload_regions()
if not result:
    log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥")
    exit(1)

job_id = result.get("job_id")
log(f"‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: {job_id}")

# 3. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
log("3. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–∞–∫—Å 8 –º–∏–Ω—É—Ç)...")
start_time = time.time()
while time.time() - start_time < 480:  # 8 –º–∏–Ω—É—Ç
    status = check_status()
    if status and status.get("status") == "idle":
        log("‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        break
    elif status and status.get("status") == "running":
        elapsed = int(time.time() - start_time)
        log(f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ ({elapsed}s)")
    time.sleep(20)
else:
    log("‚ùå –¢–∞–π–º–∞—É—Ç")
    exit(1)

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
log("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...")
conn = psycopg2.connect(
    host="aws-0-eu-central-1.pooler.supabase.com",
    port=5432,
    dbname="postgres",
    user="postgres.cehitgienxwzplcxbfdk",
    password="!!!!QQQQ2222"
)

cur = conn.cursor()

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
cur.execute("SELECT COUNT(*) FROM reports WHERE fetched_at >= NOW() - INTERVAL '20 minutes'")
total = cur.fetchone()[0]

# –ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º
cur.execute("SELECT COUNT(*) FROM reports r JOIN regions rg ON rg.id = r.region_id WHERE r.fetched_at >= NOW() - INTERVAL '20 minutes'")
regions = cur.fetchone()[0]

# –ú–æ—Å–∫–≤–∞
cur.execute("SELECT COUNT(*) FROM reports r JOIN regions rg ON rg.id = r.region_id WHERE r.fetched_at >= NOW() - INTERVAL '20 minutes' AND rg.title = '–ú–æ—Å–∫–≤–∞'")
moscow = cur.fetchone()[0]

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
cur.execute("SELECT COUNT(DISTINCT rg.title) FROM reports r JOIN regions rg ON rg.id = r.region_id WHERE r.fetched_at >= NOW() - INTERVAL '20 minutes'")
unique_regions = cur.fetchone()[0]

log(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
log(f"üèôÔ∏è –ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º: {regions}")  
log(f"üèõÔ∏è –ü–æ –ú–æ—Å–∫–≤–µ: {moscow}")
log(f"üó∫Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: {unique_regions}")

# 5. –¢–µ—Å—Ç SQL –∑–∞–ø—Ä–æ—Å–∞
log("5. –¢–µ—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞...")
try:
    cur.execute("""
        WITH moscow_median_all AS (
            SELECT (gd->>'median')::int as moscow_median
            FROM reports r
            JOIN regions rg ON rg.id = r.region_id
            CROSS JOIN LATERAL jsonb_array_elements(r.data->'groups') AS gd
            WHERE r.region_id IS NOT NULL
              AND rg.title = '–ú–æ—Å–∫–≤–∞'
              AND gd->>'name' = 'All'
              AND r.fetched_at >= NOW() - INTERVAL '30 minutes'
              AND (gd->>'total')::int > 0
            ORDER BY r.fetched_at DESC
            LIMIT 1
        )
        SELECT COUNT(*) as result_count
        FROM reports r
        JOIN regions rg ON rg.id = r.region_id
        CROSS JOIN LATERAL jsonb_array_elements(r.data->'groups') AS gd
        CROSS JOIN moscow_median_all mm
        WHERE r.region_id IS NOT NULL
          AND gd->>'name' = 'All'
          AND r.fetched_at >= NOW() - INTERVAL '30 minutes'
          AND (gd->>'total')::int > 0
    """)
    
    result_count = cur.fetchone()[0]
    log(f"üéØ SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_count} —Å—Ç—Ä–æ–∫")
    
    if result_count > 0:
        log("‚úÖ SQL –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        log("‚ö†Ô∏è SQL –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ")
        
except Exception as e:
    log(f"‚ùå –û—à–∏–±–∫–∞ SQL: {e}")

cur.close()
conn.close()

log("=== üéâ –ó–ê–î–ê–ß–ê –ü–û–õ–ù–û–°–¢–¨–Æ –í–´–ü–û–õ–ù–ï–ù–ê! ===")
print("\n" + "="*60)
print("–§–ò–ù–ê–õ–¨–ù–´–ô SQL –ó–ê–ü–†–û–°:")
print("="*60)
print("""
WITH moscow_median_all AS (
    SELECT (gd->>'median')::int as moscow_median
    FROM reports r
    JOIN regions rg ON rg.id = r.region_id
    CROSS JOIN LATERAL jsonb_array_elements(r.data->'groups') AS gd
    WHERE r.region_id IS NOT NULL
      AND rg.title = '–ú–æ—Å–∫–≤–∞'
      AND gd->>'name' = 'All'
      AND r.fetched_at >= NOW() - INTERVAL '30 minutes'
      AND (gd->>'total')::int > 0
    ORDER BY r.fetched_at DESC
    LIMIT 1
)
SELECT
    rg.title                         AS region,
    (gd->>'median')::int             AS median_salary,
    mm.moscow_median                 AS moscow_median,
    CASE 
        WHEN mm.moscow_median IS NOT NULL AND mm.moscow_median > 0 THEN
            ROUND(((gd->>'median')::int - mm.moscow_median) * 100.0 / mm.moscow_median, 1)
        ELSE 0
    END                              AS diff_from_moscow_percent
FROM reports r
JOIN regions rg ON rg.id = r.region_id
CROSS JOIN LATERAL jsonb_array_elements(r.data->'groups') AS gd
CROSS JOIN moscow_median_all mm
WHERE r.region_id IS NOT NULL
  AND gd->>'name' = 'All'
  AND r.fetched_at >= NOW() - INTERVAL '30 minutes'
  AND (gd->>'total')::int > 0
ORDER BY (gd->>'median')::int DESC;
""")
