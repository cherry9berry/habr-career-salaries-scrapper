#!/usr/bin/env python3
import time
import requests
import psycopg2
from datetime import datetime

def log(msg):
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {msg}")

def check_status():
    try:
        response = requests.get("https://habr-career-salaries-scrapper.onrender.com/api/status", timeout=10)
        return response.json()
    except:
        return None

def upload_regions_csv():
    try:
        with open("examples/regions_from_db.csv", "rb") as f:
            files = {"config": f}
            response = requests.post(
                "https://habr-career-salaries-scrapper.onrender.com/api/scrape/upload",
                files=files,
                timeout=30
            )
            response.raise_for_status()
            return response.json()
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
        return None

log("=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê: –°–ö–†–ê–ü–ò–ù–ì –†–ï–ì–ò–û–ù–û–í ===")

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
log("1. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º...")
result = upload_regions_csv()
if not result:
    log("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥")
    exit(1)

job_id = result.get("job_id")
log(f"–°–∫—Ä–∞–ø–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω: {job_id}")

# –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç)
log("2. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
start_time = time.time()
while time.time() - start_time < 600:  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
    status = check_status()
    if status and status.get("status") == "idle":
        log("‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        break
    elif status and status.get("status") == "running":
        elapsed = int(time.time() - start_time)
        log(f"–í –ø—Ä–æ—Ü–µ—Å—Å–µ ({elapsed}s): {status.get('job_id', 'unknown')}")
    time.sleep(15)
else:
    log("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
log("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...")
conn = psycopg2.connect(
    host="aws-0-eu-central-1.pooler.supabase.com",
    port=5432,
    dbname="postgres",
    user="postgres.cehitgienxwzplcxbfdk",
    password="!!!!QQQQ2222"
)

cur = conn.cursor()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç
cur.execute("SELECT COUNT(*) FROM reports WHERE fetched_at >= NOW() - INTERVAL '15 minutes'")
total = cur.fetchone()[0]
log(f"üìä –ó–∞–ø–∏—Å–µ–π –∑–∞ 15 –º–∏–Ω: {total}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
cur.execute("SELECT COUNT(*) FROM reports r JOIN regions rg ON rg.id = r.region_id WHERE r.fetched_at >= NOW() - INTERVAL '15 minutes' AND r.region_id IS NOT NULL")
regions = cur.fetchone()[0]
log(f"üèôÔ∏è –ó–∞–ø–∏—Å–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º: {regions}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ú–æ—Å–∫–≤—ã
cur.execute("SELECT COUNT(*) FROM reports r JOIN regions rg ON rg.id = r.region_id WHERE r.fetched_at >= NOW() - INTERVAL '15 minutes' AND rg.title = '–ú–æ—Å–∫–≤–∞'")
moscow = cur.fetchone()[0]
log(f"üèõÔ∏è –ó–∞–ø–∏—Å–µ–π –ø–æ –ú–æ—Å–∫–≤–µ: {moscow}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (–Ω–µ generic)
cur.execute("SELECT COUNT(*) FROM reports r JOIN regions rg ON rg.id = r.region_id WHERE r.fetched_at >= NOW() - INTERVAL '15 minutes' AND NOT (r.data->'groups'->0->>'title' LIKE '–ü–æ –≤—Å–µ–º%')")
specific = cur.fetchone()[0]
log(f"üéØ –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {specific}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
cur.execute("SELECT COUNT(DISTINCT rg.title) FROM reports r JOIN regions rg ON rg.id = r.region_id WHERE r.fetched_at >= NOW() - INTERVAL '15 minutes'")
unique_regions = cur.fetchone()[0]
log(f"üó∫Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: {unique_regions}")

cur.close()
conn.close()

log("=== ‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê! –î–ê–ù–ù–´–ï –ì–û–¢–û–í–´ ===")
print("\n–§–∏–Ω–∞–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
print("""
WITH moscow_median_all AS (
    SELECT (gd->>'median')::int as moscow_median
    FROM reports r
    JOIN regions rg ON rg.id = r.region_id
    CROSS JOIN LATERAL jsonb_array_elements(r.data->'groups') AS gd
    WHERE r.region_id IS NOT NULL
      AND rg.title = '–ú–æ—Å–∫–≤–∞'
      AND gd->>'name' = 'All'
      AND r.fetched_at >= NOW() - INTERVAL '30 minutes'
      AND (gd->>'total')::int > 0
    ORDER BY r.fetched_at DESC
    LIMIT 1
)
SELECT
    rg.title                         AS region,
    (gd->>'median')::int             AS median_salary,
    mm.moscow_median                 AS moscow_median,
    CASE 
        WHEN mm.moscow_median IS NOT NULL AND mm.moscow_median > 0 THEN
            ROUND(((gd->>'median')::int - mm.moscow_median) * 100.0 / mm.moscow_median, 1)
        ELSE 0
    END                              AS diff_from_moscow_percent
FROM reports r
JOIN regions rg ON rg.id = r.region_id
CROSS JOIN LATERAL jsonb_array_elements(r.data->'groups') AS gd
CROSS JOIN moscow_median_all mm
WHERE r.region_id IS NOT NULL
  AND gd->>'name' = 'All'
  AND r.fetched_at >= NOW() - INTERVAL '30 minutes'
  AND (gd->>'total')::int > 0
ORDER BY (gd->>'median')::int DESC;
""")
