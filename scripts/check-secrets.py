#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/check-secrets.py
"""

import re
import os
import sys
from pathlib import Path

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –†–ï–ê–õ–¨–ù–´–• —Å–µ–∫—Ä–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∏–º–µ—Ä—ã)
SECRET_PATTERNS = [
    (r'sk-[a-zA-Z0-9]{48}', 'OpenAI API –∫–ª—é—á'),
    (r'ghp_[a-zA-Z0-9]{36}', 'GitHub —Ç–æ–∫–µ–Ω'),
    (r'xoxb-[0-9]{11,12}-[0-9]{11,12}-[a-zA-Z0-9]{24}', 'Slack —Ç–æ–∫–µ–Ω'),
    (r'[a-zA-Z0-9]{32,}', '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞'),
]

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
EXCLUDE_DIRS = {'.git', '__pycache__', '.pytest_cache', '.mypy_cache', 'node_modules', '.ruff_cache', '.coverage'}
EXCLUDE_FILES = {'check-secrets.py', 'pre-commit', 'CACHEDIR.TAG', '.coverage', 'coverage.xml'}

# –§–∞–π–ª—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
EXAMPLE_FILES = {'config.example.yaml', 'README.md', 'docker-compose.yml', 'render_setup.sh'}

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è-–ø—Ä–∏–º–µ—Ä—ã (–Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–µ–∫—Ä–µ—Ç—ã)
SAFE_EXAMPLES = {
    'your_password',
    'your_secure_password',
    'password',
    'secret',
    'token',
    'your_api_key',
    'your_secret',
    'your_token',
    'example_password',
    '8a477f597d28d172789f06886806bc55',  # ruff cache hash
}


def check_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()

        findings = []
        file_name = os.path.basename(str(file_path))

        for pattern, description in SECRET_PATTERNS:
            matches = re.finditer(pattern, content, re.IGNORECASE)
            for match in matches:
                matched_text = match.group()

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                if any(safe in matched_text.lower() for safe in SAFE_EXAMPLES):
                    continue

                # –î–ª—è —Ñ–∞–π–ª–æ–≤-–ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if file_name in EXAMPLE_FILES and 'API –∫–ª—é—á' not in description and '—Ç–æ–∫–µ–Ω' not in description:
                    continue

                line_num = content[: match.start()].count('\n') + 1
                findings.append(
                    {
                        'file': file_path,
                        'line': line_num,
                        'pattern': description,
                        'match': matched_text[:50] + '...' if len(matched_text) > 50 else matched_text,
                    }
                )

        return findings
    except Exception:
        return []


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ...")

    all_findings = []
    project_root = Path('.')

    for root, dirs, files in os.walk(project_root):
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]

        for file in files:
            if file in EXCLUDE_FILES:
                continue

            file_path = Path(root) / file
            findings = check_file(file_path)
            all_findings.extend(findings)

    if all_findings:
        print(f"\nüö® –ù–ê–ô–î–ï–ù–û {len(all_findings)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤:")
        print("-" * 60)

        for finding in all_findings:
            print(f"üìÅ {finding['file']}:{finding['line']}")
            print(f"üîç {finding['pattern']}")
            print(f"üìù {finding['match']}")
            print("-" * 60)

        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –£–¥–∞–ª–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("3. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –≤ .gitignore")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ config.example.yaml –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤")

        sys.exit(1)
    else:
        print("‚úÖ –°–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        sys.exit(0)


if __name__ == "__main__":
    main()
