#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/check-secrets.py
"""

import re
import os
import sys
from pathlib import Path

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
SECRET_PATTERNS = [
    (r'!!!!QQQQ\d+', 'Supabase –ø–∞—Ä–æ–ª—å'),
    (r'password\s*[:=]\s*["\'][^"\']{8,}["\']', '–ü–∞—Ä–æ–ª—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö'),
    (r'PASSWORD\s*[:=]\s*[^\s]+', '–ü–∞—Ä–æ–ª—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è'),
    (r'api[_-]?key\s*[:=]\s*["\'][^"\']+["\']', 'API –∫–ª—é—á'),
    (r'secret\s*[:=]\s*["\'][^"\']+["\']', '–°–µ–∫—Ä–µ—Ç'),
    (r'token\s*[:=]\s*["\'][^"\']+["\']', '–¢–æ–∫–µ–Ω'),
    (r'postgres\.[a-z0-9]+', 'Supabase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
    (r'sk-[a-zA-Z0-9]{48}', 'OpenAI API –∫–ª—é—á'),
    (r'ghp_[a-zA-Z0-9]{36}', 'GitHub —Ç–æ–∫–µ–Ω'),
]

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
EXCLUDE_DIRS = {'.git', '__pycache__', '.pytest_cache', '.mypy_cache', 'node_modules'}
EXCLUDE_FILES = {'check-secrets.py', 'pre-commit'}

def check_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            
        findings = []
        for pattern, description in SECRET_PATTERNS:
            matches = re.finditer(pattern, content, re.IGNORECASE)
            for match in matches:
                line_num = content[:match.start()].count('\n') + 1
                findings.append({
                    'file': file_path,
                    'line': line_num,
                    'pattern': description,
                    'match': match.group()[:50] + '...' if len(match.group()) > 50 else match.group()
                })
        
        return findings
    except Exception:
        return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ...")
    
    all_findings = []
    project_root = Path('.')
    
    for root, dirs, files in os.walk(project_root):
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
        
        for file in files:
            if file in EXCLUDE_FILES:
                continue
                
            file_path = Path(root) / file
            findings = check_file(file_path)
            all_findings.extend(findings)
    
    if all_findings:
        print(f"\nüö® –ù–ê–ô–î–ï–ù–û {len(all_findings)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤:")
        print("-" * 60)
        
        for finding in all_findings:
            print(f"üìÅ {finding['file']}:{finding['line']}")
            print(f"üîç {finding['pattern']}")
            print(f"üìù {finding['match']}")
            print("-" * 60)
            
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –£–¥–∞–ª–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("3. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –≤ .gitignore")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ config.example.yaml –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        sys.exit(1)
    else:
        print("‚úÖ –°–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        sys.exit(0)

if __name__ == "__main__":
    main() 